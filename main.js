/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GithubProxy
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mirrorServer: "fastgit",
  enabled: false,
  language: "ZH-CN"
};
var mirrorsMap = {
  fastgit: {
    download: "https://download.fastgit.org/",
    raw: "https://raw.fastgit.org/",
    repo: "https://hub.fastgit.org/"
  },
  mtr: {
    download: "https://download.fastgit.org/",
    raw: "https://raw-gh.gcdn.mirr.one/",
    repo: "https://api.mtr.pub/"
  },
  ghproxy: {
    download: "https://mirror.ghproxy.com/https://github.com/",
    raw: "https://mirror.ghproxy.com/https://github.com/",
    repo: "https://mirror.ghproxy.com/https://github.com/"
  },
  gitclone: {
    download: "https://download.fastgit.org/",
    raw: "https://raw.fastgit.org/",
    repo: "https://gitclone.com/github.com/"
  },
  mirr: {
    download: "https://gh.gcdn.mirr.one/",
    raw: "https://raw-gh.gcdn.mirr.one/",
    repo: "https://gh.gcdn.mirr.one/"
  }
};
var GithubProxy = class extends import_obsidian.Plugin {
  constructor(app, plugin) {
    super(app, plugin);
    this.pluginName = plugin.name;
    this.version = plugin.version;
  }
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("cherry", "\u793E\u533A\u63D2\u4EF6\u4EE3\u7406\u5F00\u5173", async (evt) => {
      this.switchGProxy();
    });
    ribbonIconEl.addClass(this.settings.enabled ? "enabled-gproxy-ribbon" : "disabled-gproxy-ribbon");
    this.addCommand({
      id: "GProxy",
      name: "\u6253\u5F00/\u5173\u95ED\u793E\u533A\u63D2\u4EF6\u4EE3\u7406",
      callback: () => {
        this.switchGProxy();
      }
    });
    this.addSettingTab(new GProxySettingTab(this.app, this));
    const self = this;
    if (window.electron) {
      this.proxyElectron = new ProxyElectron(self.pluginName, self.settings.mirrorServer);
      this.proxyElectron.registerRequest();
    }
  }
  onunload() {
    if (window.electron) {
      this.proxyElectron.cancelRegister();
    }
  }
  switchGProxy() {
    this.loadSettings({ enabled: !this.settings.enabled });
    this.saveSettings();
    new import_obsidian.Notice(this.settings.enabled ? "\u5DF2\u5173\u95ED\u793E\u533A\u63D2\u4EF6\u4EE3\u7406" : "\u5DF2\u542F\u7528\u793E\u533A\u63D2\u4EF6\u4EE3\u7406");
  }
  async loadSettings(option) {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData(), option || {});
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var ProxyElectron = class {
  constructor(pluginName, mirrorServer) {
    this.pluginName = pluginName;
    this.mirrorServer = mirrorServer;
  }
  registerRequest() {
    this.request = window.electron.ipcRenderer.send;
    const self = this;
    window.electron.ipcRenderer.send = function(channel, salt, opt, ...rest) {
      if (channel === "request-url") {
        const additionalOpt = resolveUrl(opt.url, self.mirrorServer);
        opt = Object.assign({}, opt, additionalOpt);
      }
      self.request(channel, salt, opt, ...rest);
    };
    console.log(`[${this.pluginName}] electron.ipcRenderer.send has been taken over`);
  }
  cancelRegister() {
    window.electron.ipcRenderer.send = this.request;
  }
};
function resolveUrl(url, mirrorServer = DEFAULT_SETTINGS.mirrorServer) {
  if (!url || !RegExp("^https?").test(url))
    return { url };
  const isDownload = RegExp("/releases/download/").test(url);
  const isRaw = RegExp("https://raw.githubusercontent.com/").test(url);
  let newUrl;
  if (isDownload) {
    newUrl = url.replace("https://github.com/", mirrorsMap[mirrorServer]["download"]);
  } else {
    newUrl = url.replace("https://github.com/", mirrorsMap[mirrorServer]["repo"]);
  }
  if (isRaw) {
    newUrl = url.replace("https://raw.githubusercontent.com/", mirrorsMap[mirrorServer]["raw"]);
  }
  return {
    url: newUrl,
    headers: {
      "content-type": "application/x-www-form-urlencoded",
      "Access-Control-Allow-Origin": "*"
    }
  };
}
var GProxySettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "GProxy" });
    containerEl.createEl("p", {
      text: "\u4ECEgithub\u955C\u50CF\u8D44\u6E90\u7AD9\u4E0B\u8F7DObsidian \u793E\u533A\u63D2\u4EF6\uFF0C\u89E3\u51B3github\u8D44\u6E90\u4E0B\u8F7D\u5931\u8D25\u95EE\u9898"
    });
    new import_obsidian.Setting(containerEl).setName("\u542F\u7528 GProxy").setDesc("\u662F\u5426\u542F\u7528 GProxy\uFF0C\u9009\u62E9\u955C\u50CF\u4EE3\u7406 Obsidian \u793E\u533A\u63D2\u4EF6").addToggle((proxySwitch) => proxySwitch.setValue(this.plugin.settings.enabled).onChange(async (value) => {
      this.plugin.settings.enabled = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u9009\u62E9\u955C\u50CF\u6E90").addDropdown((option) => {
      option.addOption("fastgit", "fastgit").addOption("mtr", "mtr").addOption("ghproxy", "ghproxy").addOption("gitclone", "gitclone").addOption("mirr", "mirr").setValue(this.plugin.settings.mirrorServer).onChange(async (val) => {
        this.plugin.settings.mirrorServer = val;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Language").setDesc("Choose your favor language.").addDropdown((option) => {
      option.setDisabled(true).addOption("ZH-CN", "\u7B80\u4F53\u4E2D\u6587").addOption("EN", "English").setValue(this.plugin.settings.language).onChange(async (val) => {
        console.log("Language", val);
        this.plugin.settings.language = val;
        await this.plugin.saveSettings();
      });
    });
  }
};
